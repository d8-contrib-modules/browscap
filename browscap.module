<?php
/**
 * @file
 * Replacement for PHP's get_browser() function.
 */

/**
 * Implements hook_permission().
 */
function browscap_permission() {
  return array(
    'administer browscap' => array(
      'title' => t('Administer Browscap reports'),
    ),
    'view browscap reports' => array(
      'title' => t('View Browscap reports'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function browscap_menu() {
  $items['admin/reports/browscap'] = array(
    'title' => 'Browscap',
    'description' => 'Browser-specific site statistics.',
    'page callback' => 'browscap_top_useragents',
    'page arguments' => array('all'),
    'access arguments' => array('view browscap reports'),
    'file' => 'browscap.reports.inc',
    'weight' => 5,
  );
  $items['admin/reports/browscap/useragents'] = array(
    'title' => 'All',
    'access arguments' => array('view browscap reports'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/reports/browscap/browsers'] = array(
    'title' => 'Browsers',
    'page callback' => 'browscap_top_useragents',
    'page arguments' => array('browsers'),
    'access arguments' => array('view browscap reports'),
    'file' => 'browscap.reports.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $items['admin/reports/browscap/crawlers'] = array(
    'title' => 'Crawlers',
    'page callback' => 'browscap_top_useragents',
    'page arguments' => array('crawlers'),
    'access arguments' => array('view browscap reports'),
    'file' => 'browscap.reports.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );
  $items['admin/reports/browscap/settings'] = array(
    'title' => 'Settings',
    'description' => 'Enable browscap site statistics.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('browscap_settings_form'),
    'access arguments' => array('administer browscap'),
    'file' => 'browscap.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 100,
  );
  $items['admin/reports/browscap/useragent/%browscap_useragent'] = array(
    'title' => 'Useragent details',
    'page callback' => 'browscap_useragent_properties',
    'page arguments' => array(4),
    'access arguments' => array('view browscap reports'),
    'file' => 'browscap.user_agent.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );
  return $items;
}

/**
 * Implements hook_exit().
 *
 * Keep tabs on browsers that visit
 */
function browscap_exit() {
  // If monitoring is enabled, record the browser
  if (variable_get('browscap_monitor', FALSE)) {
    if ($browser = browscap_get_browser()) {
      $browserstring = empty($browser['parent'])
        ? 'Default Browser'
        : substr(trim($browser['parent']), 0, 255);
      if ($browserstring == 'Default Browser') {
        $browserstring = substr(trim($_SERVER['HTTP_USER_AGENT']), 0, 255);
      }
      if (empty($browser['crawler'])) {
        $browser['crawler'] = 0;
      }
      db_merge('browscap_statistics')
        ->key(array('parent' => $browserstring))
        ->fields(array(
          'counter' => 1,
          'is_crawler' => $browser['crawler'] ? 1 : 0,
        ))
        ->expression('counter', 'counter + 1')
        ->execute();
    }
  }
}

/**
 * Implements hook_cron().
 */
function browscap_cron() {
  // How often should a check for updates occur (in days)?
  $update_interval = variable_get('browscap_update_interval', 7);

  // Convert the update interval from days to seconds
  $update_interval = $update_interval * 7 * 24 * 60 * 60;

  // Has it been long enough since the last update was attempted?
  if (($last_imported + $update_interval) < REQUEST_TIME) {
    _browscap_import();
    variable_set('browscap_imported', REQUEST_TIME);
  }
}

/**
 * Provide data about the current browser or a known user agent string.
 *
 * @param string $useragent
 *   Optional user agent string to test.  If empty use the value from the current request.
 * @return array
 *  An array of data about the user agent.
 */
function browscap_get_browser($useragent = NULL) {
  if (!$useragent) {
    $useragent = $_SERVER['HTTP_USER_AGENT'];
  }
  // Cache the results
  $cacheid = $useragent;
  $cache = cache_get($cacheid, 'cache_browscap');
  if ((!empty($cache)) and ($cache->created > REQUEST_TIME - 60*60*24)) {
    // Found a fresh entry in the cache
    $browserinfo = $cache->data;
  }
  else {
    // Note the 'backwards' use of LIKE - the useragent column contains
    // the wildcarded pattern to match against our full-length string
    // The ORDER BY chooses the most-specific matching pattern
    $browserinfo = db_query(
      "SELECT * FROM {browscap} WHERE :useragent LIKE useragent ORDER BY LENGTH(useragent) DESC",
      array(':useragent' => $useragent))
      ->fetchObject();
    // A couple of fieldnames not in our database, provided for
    // compatibility with PHP's get_browser()
    //$browserinfo->tables = $browserinfo->htmltables;
    cache_set($cacheid, $browserinfo, 'cache_browscap');
  }
  if (isset($browserinfo) && isset($browserinfo->data)) {
    $info = unserialize($browserinfo->data);
    $info['useragent'] = $useragent;
    $info['browser_name_pattern'] = strtr($browserinfo->useragent, '%_', '*?');
    return $info;
  }
}

/**
 * Determine whether the current visitor is a bot.
 *
 * @param string $useragent
 *   Optional user agent string.
 */
function browscap_is_crawler($useragent = NULL) {
  $browser = browscap_get_browser($useragent);
  return (bool)$browser['crawler'];
}

/**
 * If there's a new version of browscap.csv, fetch it and update the
 * database.
 */
function _browscap_import($cron = TRUE) {
  // Politely check the version for updates before fetching the file
  $versionpage = drupal_http_request('http://browsers.garykeith.com/versions/version-number.asp');
  if (isset($versionpage->error)) {
    watchdog('browscap', 'Couldn\'t check version: %error', array('%error' => $versionpage->error), WATCHDOG_ERROR);
    if (!$cron) {
      drupal_set_message(t('Couldn\'t check version: %error', array('%error' => $versionpage->error)), 'error');
    }
    return;
  }
  $browscapversion = trim($versionpage->data);
  $oldversion = variable_get('browscap_version', 0);
  if ($browscapversion == $oldversion) {
    // No update, nothing to do here
    watchdog('browscap', 'No new version of browscap to import');
    if (!$cron) {
      drupal_set_message(t('No new version of browscap to import'));
    }
    return;
  }

  // Fetch the new version, and dump it in the temp directory
  $server = $_SERVER['SERVER_NAME'];
  $path = variable_get('file_temporary_path', '/tmp');
  $browscapfile = "$path/browscap_$server.ini";

  // @todo This probably ought to be in a settings variable.
  $browscap = drupal_http_request('http://browsers.garykeith.com/stream.asp?PHP_BrowsCapINI');
  if (isset($browscap->error) || empty($browscap)) {
    watchdog('browscap', "Couldn't retrieve updated browscap: %error", array('%error' => $browscap->error), WATCHDOG_ERROR);
    if (!$cron) {
      drupal_set_message(t("Couldn't retrieve updated browscap: %error", array('%error' => $browscap->error)), 'error');
    }
    return;
  }

  // The file as downloaded from browser.garykeith.com has semicolon (;) and
  // single-quote (') characters in the section strings, either of which will
  // cause parse_ini_file() to abort and return FALSE.  To fix this, simply
  // escape them with the backslash character.
  $browscap->data = preg_replace(array("/(?<![;\n])([;'])/", '/\A\\\\/'), array('\\\\$1', ''), $browscap->data);

  $browscapfp = fopen($browscapfile, "w");
  fwrite($browscapfp, $browscap->data);
  fclose($browscapfp);

  if (version_compare(PHP_VERSION, '5.3.0', '>=')) {
    $a = parse_ini_file($browscapfile, TRUE, INI_SCANNER_RAW);
  }
  else {
    $a = parse_ini_file($browscapfile, TRUE);
  }
  if ($a) {
    // the first entry in the array is the version info
    $version = array_shift($a);
    foreach ($a as $key => $vals) {
      $e = $vals;
      // some recursive magic!
      $last_parent = array();
      while (isset($vals['Parent']) && $vals['Parent'] !== $last_parent) {
        $vals = isset($a[$vals['Parent']]) ? $a[$vals['Parent']] : array();
        $e = array_merge($vals, $e);
        $last_parent = $vals;
      }
      $useragent = strtr($key, '*?', '%_');
      $e = array_change_key_case($e);
      db_delete('browscap')
        ->condition('useragent', $useragent)
        ->execute();
      db_insert('browscap')
        ->fields(array(
         'useragent' => $useragent,
         'data' => serialize($e)
        ))
        ->execute();
    }

    cache_clear_all('*', 'cache_browscap', TRUE);
    variable_set('browscap_version', $browscapversion);
    watchdog('browscap', 'New version of browscap imported: %version', array('%version' => $browscapversion));
    if (!$cron) {
      drupal_set_message(t('New version of browscap imported: %version', array('%version' => $browscapversion)));
    }
  }
}

/**
 * Loads details about a given useragent. Also used as a menu object loader.
 *
 * @param $useragent
 *   The name of the useragent to load.
 * @return
 *   The useragent array, FALSE otherwise.
 */
function browscap_useragent_load($useragent = NULL) {
  if (empty($useragent)) {
    return FALSE;
  }
  $row = db_select('browscap', 'b')
    ->fields('b')
    ->condition('useragent', $useragent)
    ->execute()
    ->fetchObject();
  if (!$row) {
    return FALSE;
  }
  return unserialize($row->data);
}
